using Microsoft.Win32;
using System;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Drawing;

namespace WeAreDevs.Windows
{
    public partial class Main : Form
    {
        public Main()
        {
            InitializeComponent();
            LoadEditor();
            LoadScriptsToScriptBox();
            
            Title.Text = "WeAreDevs " + Settings.Version;

            if (Discord.Username != null)
            {
                Username.Text = Discord.Username;
                WebClient wc = new WebClient();
                byte[] imagebytes = wc.DownloadData(Discord.Avatar);
                MemoryStream ms = new MemoryStream(imagebytes);
                ProfilePicture.Image = Image.FromStream(ms);
            } else
            {
                Username.Visible = false;
                ProfilePicture.Visible = false;
            }
        }

        #region Editor
        private string defPath = Application.StartupPath + "//Monaco//";
        private void addIntel(string label, string kind, string detail, string insertText)
        {
            string text = "\"" + label + "\"";
            string text2 = "\"" + kind + "\"";
            string text3 = "\"" + detail + "\"";
            string text4 = "\"" + insertText + "\"";
            webBrowser1.Document.InvokeScript("AddIntellisense", new object[]
            {
                label,
                kind,
                detail,
                insertText
            });
        }
        private void addGlobalF()
        {
            string[] array = File.ReadAllLines(this.defPath + "//globalf.txt");
            foreach (string text in array)
            {
                bool flag = text.Contains(':');
                if (flag)
                {
                    this.addIntel(text, "Function", text, text.Substring(1));
                }
                else
                {
                    this.addIntel(text, "Function", text, text);
                }
            }
        }
        private void addGlobalV()
        {
            foreach (string text in File.ReadLines(this.defPath + "//globalv.txt"))
            {
                this.addIntel(text, "Variable", text, text);
            }
        }
        private void addGlobalNS()
        {
            foreach (string text in File.ReadLines(this.defPath + "//globalns.txt"))
            {
                this.addIntel(text, "Class", text, text);
            }
        }
        private void addMath()
        {
            foreach (string text in File.ReadLines(this.defPath + "//classfunc.txt"))
            {
                this.addIntel(text, "Method", text, text);
            }
        }
        private void addBase()
        {
            foreach (string text in File.ReadLines(this.defPath + "//base.txt"))
            {
                this.addIntel(text, "Keyword", text, text);
            }
        }
        private async Task LoadEditor()
        {
            WebClient wc = new WebClient();
            wc.Proxy = null;
            try
            {
                RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Internet Explorer\\Main\\FeatureControl\\FEATURE_BROWSER_EMULATION", true);
                string friendlyName = AppDomain.CurrentDomain.FriendlyName;
                bool flag2 = registryKey.GetValue(friendlyName) == null;
                if (flag2)
                {
                    registryKey.SetValue(friendlyName, 11001, RegistryValueKind.DWord);
                }
                registryKey = null;
                friendlyName = null;
            }
            catch (Exception)
            {
            }
            webBrowser1.Url = new Uri(string.Format("file:///{0}/Bin/Monaco.html", Directory.GetCurrentDirectory()));
            await Task.Delay(500);
            webBrowser1.Document.InvokeScript("SetTheme", new string[]
            {
                   "Dark" 
                   /*
                    There are 2 Themes Dark and Light
                   */
            });
            addBase();
            addMath();
            addGlobalNS();
            addGlobalV();
            addGlobalF();
        }
        private void ClearEditor()
        {
            webBrowser1.Document.InvokeScript("SetText", new object[]
            {
                ""
            });
        }
        private string GetEditorScript()
        {
            HtmlDocument document = webBrowser1.Document;
            object[] args = new string[0];
            return document.InvokeScript("GetText", args).ToString();
        }
        private void SetEditorText(string text)
        {
            webBrowser1.Document.InvokeScript("SetText", new object[]
            {
                 text
            });
        }
        private string GetScriptFromFile()
        {
            try
            {
                OpenFileDialog dialog = new OpenFileDialog();
                dialog.InitialDirectory = Directory.GetCurrentDirectory() + "\\Scripts\\";
                dialog.Title = "WeAreDevs";
                dialog.Filter = "Text File (*.txt)|*.txt|Lua Script (*.lua)|*.lua|Any File (*.*)|*.*";
                dialog.CheckFileExists = true;
                dialog.ShowDialog();
                return File.ReadAllText(dialog.FileName);
            }
            catch { return null; }
        }
        private void SaveScriptToFile()
        {
            try
            {
                SaveFileDialog dialog = new SaveFileDialog();
                dialog.Filter = "Text File (*.txt)|*.txt|Lua Script (*.lua)|*.lua|Any File (*.*)|*.*";
                dialog.Title = "WeAreDevs";
                dialog.ShowDialog();
                File.WriteAllText(dialog.FileName, GetEditorScript());
            }
            catch { }
        }
        #endregion

        #region ScriptList 
        private void LoadScriptsToScriptBox()
        {
            listBox1.Items.Clear();
            string[] files = Directory.GetFiles(Directory.GetCurrentDirectory() + "\\Scripts\\");
            foreach (string file in files)
            {
                listBox1.Items.Add(Path.GetFileName(file));
            }
        }
        #endregion

        private void ClearButton_Click(object sender, EventArgs e)
        {
            ClearEditor();
            Logger.WriteLine("Cleared editor.");
        }

        private void OpenFileButton_Click(object sender, EventArgs e)
        {
            SetEditorText(GetScriptFromFile());
            Logger.WriteLine("Opened script from file.");
        }

        private void SaveFileButton_Click(object sender, EventArgs e)
        {
            SaveScriptToFile();
            Logger.WriteLine("Saved script to file.");
        }

        private void listBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            string file = listBox1.SelectedItem as string;
            SetEditorText(File.ReadAllText(Directory.GetCurrentDirectory() + "\\Scripts\\" + file));
        }

        private void ScriptHubButton_Click(object sender, EventArgs e)
        {
            ScriptHub s = new ScriptHub();
            s.ShowDialog();
            Logger.WriteLine("Opened script hub menu.");
        }

        private void siticoneControlBox1_Click(object sender, EventArgs e)
        {
            Environment.Exit(0);
        }

        private void AttachButton_Click(object sender, EventArgs e)
        {
            Execution.Attach();
        }

        private void ExecuteButton_Click(object sender, EventArgs e)
        {
            Execution.Execute(GetEditorScript());
        }

        private void OptionsButton_Click(object sender, EventArgs e)
        {
            Options s = new Options();
            s.ShowDialog();
            Logger.WriteLine("Opened options menu.");
        }

        private void Main_FormClosing(object sender, FormClosingEventArgs e)
        {
            
        }
    }
}
